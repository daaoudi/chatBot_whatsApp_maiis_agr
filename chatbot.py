from rdflib import Graph, Namespace
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Ontologie
g = Graph()
g.parse("ma√Øs_agadir_geolocal_turtle.ttl", format="ttl")
EX = Namespace("http://example.org/agroOntology#")

# Initialisation du mod√®le
model = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')

# Intentions group√©es par cat√©gorie
intent_map = {
    "semis": [
        "conna√Ætre la p√©riode de semis du ma√Øs √† Agadir",
        "quelle est la p√©riode id√©ale pour semer le ma√Øs √† Agadir",
        "quand faut-il semer le ma√Øs √† Agadir",
        "quelle est la bonne saison pour planter du ma√Øs",
        "quand semer le ma√Øs dans la r√©gion d'Agadir",
        "√† quel moment commence la saison de semis du ma√Øs",
        "p√©riode recommand√©e pour la culture du ma√Øs",
        "date de plantation du ma√Øs √† Agadir"
    ],
    "rendement": [
        "savoir le rendement du ma√Øs local",
        "quel est le rendement moyen du ma√Øs",
        "combien de tonnes par hectare donne le ma√Øs",
        "productivit√© du ma√Øs dans la r√©gion",
        "rendement du ma√Øs par hectare",
        "quelle quantit√© produit le ma√Øs local"
    ],
    "sol": [
        "conna√Ætre le type de sol pour le ma√Øs",
        "quel type de sol est adapt√© au ma√Øs",
        "le ma√Øs pousse dans quel sol",
        "sol recommand√© pour la culture du ma√Øs",
        "de quel sol le ma√Øs a-t-il besoin",
        "sol id√©al pour le ma√Øs"
    ],
    "climat": [
        "savoir le climat adapt√© au ma√Øs",
        "quel climat est bon pour le ma√Øs",
        "conditions climatiques pour cultiver le ma√Øs",
        "quel est le meilleur climat pour le ma√Øs",
        "le ma√Øs a besoin de quel climat",
        "climat id√©al pour le ma√Øs"
    ]
}

# Liste plate des intentions et correspondance
flat_intents = []
intent_labels = []
for label, phrases in intent_map.items():
    for phrase in phrases:
        flat_intents.append(phrase)
        intent_labels.append(label)

# Embedding des intentions
intent_embeddings = model.encode(flat_intents)

# SPARQL semis
def get_semis_mais_agadir():
    query = """
    PREFIX : <http://example.org/agroOntology#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

    SELECT ?cultureLabel ?regionLabel ?debut ?fin
    WHERE {
      :Ma√ØsLocal a :Ma√Øs ;
                 rdfs:label ?cultureLabel ;
                 :aPourP√©riodeSemis ?periode ;
                 :cultiv√©Dans ?region .

      ?periode :d√©but ?debut ;
               :fin ?fin .

      ?region rdfs:label ?regionLabel .
    }
    """
    results = g.query(query)
    for row in results:
        return f"üå± P√©riode de semis du ma√Øs local √† {row.regionLabel} : du {row.debut} au {row.fin}"
    return "‚ùå Aucune information trouv√©e."

# Chatbot
def chatbot_respond(user_input):
    input_embedding = model.encode([user_input])
    similarities = cosine_similarity(input_embedding, intent_embeddings)[0]
    best_idx = np.argmax(similarities)
    best_intent = flat_intents[best_idx]
    best_label = intent_labels[best_idx]
    score = similarities[best_idx]

    print(f"üß† Intention d√©tect√©e : {best_intent} (similarit√©: {score:.2f})")

    if best_label == "semis":
        return get_semis_mais_agadir()
    elif best_label == "rendement":
        return "üåæ Le rendement moyen du ma√Øs local est de 8.0 tonnes/hectare."
    elif best_label == "sol":
        return "üåç Le ma√Øs local n√©cessite un sol argileux et bien drain√©."
    elif best_label == "climat":
        return "üå§Ô∏è Le climat adapt√© au ma√Øs est chaud et mod√©r√©ment humide."
    else:
        return "‚ùå D√©sol√©, je ne comprends pas encore cette question."

# Test
user_input = "Quand semer le ma√Øs √† Agadir cette ann√©e ?"
print("üë§", user_input)
response = chatbot_respond(user_input)
print("ü§ñ", response)
